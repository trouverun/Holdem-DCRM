# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpc import RL_pb2 as rpc_dot_RL__pb2


class ActorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRegrets = channel.unary_unary(
                '/Actor/GetRegrets',
                request_serializer=rpc_dot_RL__pb2.Observation.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Prediction.FromString,
                )
        self.GetStrategies = channel.unary_unary(
                '/Actor/GetStrategies',
                request_serializer=rpc_dot_RL__pb2.Observation.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Prediction.FromString,
                )
        self.SetStrategy = channel.unary_unary(
                '/Actor/SetStrategy',
                request_serializer=rpc_dot_RL__pb2.Selection.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )


class ActorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStrategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegrets,
                    request_deserializer=rpc_dot_RL__pb2.Observation.FromString,
                    response_serializer=rpc_dot_RL__pb2.Prediction.SerializeToString,
            ),
            'GetStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStrategies,
                    request_deserializer=rpc_dot_RL__pb2.Observation.FromString,
                    response_serializer=rpc_dot_RL__pb2.Prediction.SerializeToString,
            ),
            'SetStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStrategy,
                    request_deserializer=rpc_dot_RL__pb2.Selection.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Actor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Actor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actor/GetRegrets',
            rpc_dot_RL__pb2.Observation.SerializeToString,
            rpc_dot_RL__pb2.Prediction.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actor/GetStrategies',
            rpc_dot_RL__pb2.Observation.SerializeToString,
            rpc_dot_RL__pb2.Prediction.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actor/SetStrategy',
            rpc_dot_RL__pb2.Selection.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class RegretLearnerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRegrets = channel.unary_unary(
                '/RegretLearner/AddRegrets',
                request_serializer=rpc_dot_RL__pb2.SampledData.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.TrainRegrets = channel.unary_unary(
                '/RegretLearner/TrainRegrets',
                request_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.AvailableStrategies = channel.unary_unary(
                '/RegretLearner/AvailableStrategies',
                request_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                )


class RegretLearnerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegretLearnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRegrets,
                    request_deserializer=rpc_dot_RL__pb2.SampledData.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'TrainRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainRegrets,
                    request_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'AvailableStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableStrategies,
                    request_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                    response_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RegretLearner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegretLearner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegretLearner/AddRegrets',
            rpc_dot_RL__pb2.SampledData.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegretLearner/TrainRegrets',
            rpc_dot_RL__pb2.IntMessage.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegretLearner/AvailableStrategies',
            rpc_dot_RL__pb2.Empty.SerializeToString,
            rpc_dot_RL__pb2.IntMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class StrategyLearnerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddStrategies = channel.unary_unary(
                '/StrategyLearner/AddStrategies',
                request_serializer=rpc_dot_RL__pb2.SampledData.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.TrainStrategy = channel.unary_unary(
                '/StrategyLearner/TrainStrategy',
                request_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.AvailableStrategies = channel.unary_unary(
                '/StrategyLearner/AvailableStrategies',
                request_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                )


class StrategyLearnerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainStrategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StrategyLearnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.AddStrategies,
                    request_deserializer=rpc_dot_RL__pb2.SampledData.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'TrainStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainStrategy,
                    request_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'AvailableStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableStrategies,
                    request_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                    response_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StrategyLearner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StrategyLearner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StrategyLearner/AddStrategies',
            rpc_dot_RL__pb2.SampledData.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StrategyLearner/TrainStrategy',
            rpc_dot_RL__pb2.Empty.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StrategyLearner/AvailableStrategies',
            rpc_dot_RL__pb2.Empty.SerializeToString,
            rpc_dot_RL__pb2.IntMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class EvaluatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetValues = channel.unary_unary(
                '/Evaluator/GetValues',
                request_serializer=rpc_dot_RL__pb2.Observation.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.EvalPrediction.FromString,
                )
        self.AddValues = channel.unary_unary(
                '/Evaluator/AddValues',
                request_serializer=rpc_dot_RL__pb2.SampledData.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.TrainValues = channel.unary_unary(
                '/Evaluator/TrainValues',
                request_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )


class EvaluatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvaluatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValues,
                    request_deserializer=rpc_dot_RL__pb2.Observation.FromString,
                    response_serializer=rpc_dot_RL__pb2.EvalPrediction.SerializeToString,
            ),
            'AddValues': grpc.unary_unary_rpc_method_handler(
                    servicer.AddValues,
                    request_deserializer=rpc_dot_RL__pb2.SampledData.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'TrainValues': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainValues,
                    request_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Evaluator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Evaluator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Evaluator/GetValues',
            rpc_dot_RL__pb2.Observation.SerializeToString,
            rpc_dot_RL__pb2.EvalPrediction.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Evaluator/AddValues',
            rpc_dot_RL__pb2.SampledData.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Evaluator/TrainValues',
            rpc_dot_RL__pb2.Empty.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompleteTraversal = channel.unary_unary(
                '/Master/CompleteTraversal',
                request_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                )
        self.CompleteEvaluation = channel.unary_unary(
                '/Master/CompleteEvaluation',
                request_serializer=rpc_dot_RL__pb2.PairMessage.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                )


class MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CompleteTraversal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteEvaluation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompleteTraversal': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTraversal,
                    request_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                    response_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
            ),
            'CompleteEvaluation': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteEvaluation,
                    request_deserializer=rpc_dot_RL__pb2.PairMessage.FromString,
                    response_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CompleteTraversal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/CompleteTraversal',
            rpc_dot_RL__pb2.IntMessage.SerializeToString,
            rpc_dot_RL__pb2.IntMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteEvaluation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/CompleteEvaluation',
            rpc_dot_RL__pb2.PairMessage.SerializeToString,
            rpc_dot_RL__pb2.IntMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SlaveStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetIdentifier = channel.unary_unary(
                '/Slave/SetIdentifier',
                request_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.RunTraversals = channel.unary_unary(
                '/Slave/RunTraversals',
                request_serializer=rpc_dot_RL__pb2.IntMessage.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )
        self.RunEvaluations = channel.unary_unary(
                '/Slave/RunEvaluations',
                request_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
                response_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                )


class SlaveServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetIdentifier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTraversals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunEvaluations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SlaveServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetIdentifier': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIdentifier,
                    request_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'RunTraversals': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTraversals,
                    request_deserializer=rpc_dot_RL__pb2.IntMessage.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
            'RunEvaluations': grpc.unary_unary_rpc_method_handler(
                    servicer.RunEvaluations,
                    request_deserializer=rpc_dot_RL__pb2.Empty.FromString,
                    response_serializer=rpc_dot_RL__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Slave', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Slave(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetIdentifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Slave/SetIdentifier',
            rpc_dot_RL__pb2.IntMessage.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTraversals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Slave/RunTraversals',
            rpc_dot_RL__pb2.IntMessage.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunEvaluations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Slave/RunEvaluations',
            rpc_dot_RL__pb2.Empty.SerializeToString,
            rpc_dot_RL__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
