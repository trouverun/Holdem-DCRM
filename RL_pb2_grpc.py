# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import RL_pb2 as RL__pb2


class ActorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRegrets = channel.unary_unary(
                '/Actor/GetRegrets',
                request_serializer=RL__pb2.Observation.SerializeToString,
                response_deserializer=RL__pb2.Regrets.FromString,
                )


class ActorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegrets,
                    request_deserializer=RL__pb2.Observation.FromString,
                    response_serializer=RL__pb2.Regrets.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Actor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Actor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actor/GetRegrets',
            RL__pb2.Observation.SerializeToString,
            RL__pb2.Regrets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LearnerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRegrets = channel.unary_unary(
                '/Learner/AddRegrets',
                request_serializer=RL__pb2.SampledData.SerializeToString,
                response_deserializer=RL__pb2.Empty.FromString,
                )
        self.AddStrategies = channel.unary_unary(
                '/Learner/AddStrategies',
                request_serializer=RL__pb2.SampledData.SerializeToString,
                response_deserializer=RL__pb2.Empty.FromString,
                )
        self.TrainRegrets = channel.unary_unary(
                '/Learner/TrainRegrets',
                request_serializer=RL__pb2.Who.SerializeToString,
                response_deserializer=RL__pb2.Empty.FromString,
                )
        self.TrainStrategy = channel.unary_unary(
                '/Learner/TrainStrategy',
                request_serializer=RL__pb2.Empty.SerializeToString,
                response_deserializer=RL__pb2.Empty.FromString,
                )


class LearnerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainRegrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainStrategy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRegrets,
                    request_deserializer=RL__pb2.SampledData.FromString,
                    response_serializer=RL__pb2.Empty.SerializeToString,
            ),
            'AddStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.AddStrategies,
                    request_deserializer=RL__pb2.SampledData.FromString,
                    response_serializer=RL__pb2.Empty.SerializeToString,
            ),
            'TrainRegrets': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainRegrets,
                    request_deserializer=RL__pb2.Who.FromString,
                    response_serializer=RL__pb2.Empty.SerializeToString,
            ),
            'TrainStrategy': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainStrategy,
                    request_deserializer=RL__pb2.Empty.FromString,
                    response_serializer=RL__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Learner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Learner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Learner/AddRegrets',
            RL__pb2.SampledData.SerializeToString,
            RL__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Learner/AddStrategies',
            RL__pb2.SampledData.SerializeToString,
            RL__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainRegrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Learner/TrainRegrets',
            RL__pb2.Who.SerializeToString,
            RL__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainStrategy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Learner/TrainStrategy',
            RL__pb2.Empty.SerializeToString,
            RL__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
